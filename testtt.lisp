(defvar *temp*)

(defvar *data* (make-array 12 :initial-element 0 :element-type '(unsigned-byte 8)))
(setf *data* (cons 1 nil))
(setq (cadr *data*) (make-array 12 :initial-element 0 :element-type '(unsigned-byte 8)))
(with-open-file
    (inputfile  "20150924_2.cap" :direction :input :element-type '(unsigned-byte 8))
    (read-sequence (cdr (ip_packet-l2_header temp)) inputfile :start 0 :end 12))

(defvar *tempp*)
(setq *tempp*
      (loop
	 for (a b) in *ip-packet-format* collect
	   (format t "(~A ~x)~%" a b)))

(setq *tempp*
      (loop
	 for (a b) in *ip-packet-format* collect
	   `(,a ,b)))

(defstruct ip-packet-split
  `,@(loop
	 for (a b) in *ip-packet-format* collect
	  `(,a (cons ,b nil))))

(setq *temp* (make-ip-packet-split))
(setq *temp* (make-ips))

`(defstruct ips2
   ,@(loop
	for (a b) in *ip-packet-format* collect
	  `(,a (cons ,b nil))))

(defmacro ip-packet-split ()
`(defstruct ip-packet-split
   ,@(loop
	for (a b) in *ip-packet-format* collect
	  `(,a (cons ,b nil)))))

(defstruct abc
  (abc1 1)
  (abc2 2)
  (abc3 3))

(with-open-file
    (inputfile "20150924_2.cap" :direction :input :element-type '(unsigned-byte 8))
  (get-data inputfile 12))
	       
(when 1 (print 1))

(setf *tempp* (coerce (append (coerce "ips-" 'list) (coerce  "abc" 'list)) 'string))

(setf *tempp*
     (loop
	for (a b) in *ip-packet-format* collect
	  `(ips-,a)))
(eval `(setf (,(intern "IPS-L2_HEADER") *temp*) '(1 2)))
(eval `(setf (cadr (,(intern "IPS-L2_HEADER") *temp*)) 3))
(eval `(setf (cadr (,(intern "IPS-L2_HEADER") *temp*)) (make-array 192)))
(eval `(setq (cadr (,(intern "IPS-L2_HEADER") *temp*))
	     (make-array 3 :initial-element 0
			 :element-type '
			 (unsigned-byte 8))))
(funcall (symbol-function (intern "IPS-L2_HEADER")) *temp*)
(let ((ac (intern "IPS-L2_HEADER")))
  (print
   (funcall (symbol-function ac) *temp*)))
(loop for (a b) in *ip-packet-format* do (print (concatenate 'string "abc-" (symbol-name a))))

(with-open-file
    (inputfile "20150924_2.cap" :direction :input :element-type '(unsigned-byte 8))
  (let ((ip-packet (make-ips)))
    (loop for (a b) in *ip-packet-format* do
	 (let ((get-member-symbol (intern (concatenate 'string "IPS-" (symbol-name a)))))
	   (let ((field-length (car (funcall (symbol-function get-member-symbol) ip-packet))))
	     (when (> field-length 0)
	       (eval `(setf (cadr (,get-member-symbol ,ip-packet))
			    (make-array ,field-length
					:initial-element 0
					:element-type
					'(unsigned-byte 8))))
	       (eval `(read-requence (cadr (,get-member-symbol ,ip-packet))
				     ,inputfile :start 0 :end ,field-length)) ))))))

(let ((testt (intern "IPS-L2_HEADER")))
  (eval `(setf (cadr (,testt *temp*)) 3)))

(with-open-file
    (inputfile "20150924_2.cap" :direction :input :element-type '(unsigned-byte 8))
  (let ((ip-packet (make-ips)))
    (loop for (a b) in *ip-packet-format* do
	 (let ((get-member-symbol (intern (concatenate 'string "IPS-" (symbol-name a)))))
	   (let ((field-length (car (funcall (symbol-function get-member-symbol) ip-packet))))
	     (when (> field-length 0)
	       (eval `(setf (,get-member-symbol ip-packet)
			    (make-array ,field-length
					:initial-element 0
					:element-type
					'(unsigned-byte 8))))) )))))
;	       (eval `(read-requence (cadr (,get-member-symbol ip-packet))
;				     inputfile :start 0 :end field-length))))))))


(defmacro mk-byte-array (length)
  `(make-array ,length :initial-element 0 :element-type '(unsigned-byte 8)))

(defmacro modify-ips-ip_data (ip-packet)
  `(let ((templength (- (+ (ash (aref (cadr (ips-ip_total_length ,ip-packet)) 0) 8)
			   (aref (cadr (ips-ip_total_length ,ip-packet)) 1))
			(aref (cadr (ips-option ,ip-packet)) 0)
			20)))
     (setf (car (ips-ip_data ,ip-packet)) templength)
     (setf (cadr (ips-ip_data ,ip-packet)) (mk-byte-array templength))
     (read-sequence (cadr (ips-ip_data ,ip-packet))
		    inputfile :start 0 :end templength))))

(defmacro modify-ips-option (ip-packet)
  `(let ((templength (- (ash (logand
			      #x0f
			      (aref
			       (cadr (ips-ip_version_header_length ,ip-packet))
			       0)) 2) 20)))
     (setf (car (ips-option ,ip-packet)) templength)
     (read-sequence (cadr (ips-option ,ip-packet))
		    inputfile :start 0 :end templength)))


(with-open-file
    (inputfile "20150924_2.cap" :direction :input :element-type '(unsigned-byte 8))
  (let ((tempdata (mk-byte-array 24))) (read-sequence tempdata inputfile :start 0 :end 24))
  (dotimes (i 103)
  (let ((ip-packet (make-ips)))
    (loop for (a b) in *ip-packet-format* do
	 (let ((get-member-symbol (intern (concatenate 'string "IPS-" (symbol-name a)))))
	   (let ((field-length (car (funcall (symbol-function get-member-symbol) ip-packet))))
	     (when (> field-length 0)
	       (let ((tempdata (mk-byte-array field-length)))
		 (read-sequence tempdata inputfile :start 0 :end field-length)
		 (eval `(setf (cadr (,get-member-symbol ,ip-packet)) ,tempdata)))))
	   (when (equal (symbol-name a) "OPTION")
	     (modify-ips-option ip-packet))
	   (when (equal (symbol-name a) "IP_DATA")
	     (modify-ips-ip_data ip-packet))))
    (print ip-packet)
    (print inputfile))))
;		 (format t "~{~2,'0x ~}" (coerce tempdata 'list))
;		 (format t "~%"))))))))

D4C3B2A1204000000000FFFF001000
A27E3566B6620C2000C20
000AE484
A27E356C2662042000420
A27E356473430CA000CA0


(setf *temp* (make-array 2 :initial-contents (make-array 3 :initial-element 1)))
(subseq *temp* 0 1)

(defmacro testtt (ebc)
    `(print ,ebc))

(defmacro testt2 (ebc)
  `(progn
     (print ,ebc)
     ,(let ((atc 1))
     (eval `(print ,atc)))))

(setf *tempp* (make-tcpps))

(with-open-file
    (inputfile "20150924_2.cap" :direction :input :element-type '(unsigned-byte 8))
  (let ((tempdata (mk-byte-array 24)))
    (read-sequence tempdata inputfile :start 0 :end 24)
    (let ((ip-packet *temp*)
	  (instream inputfile))
      (ip-packet-split *temp* instream))))

(pcap-process "20150924_2.cap")


(run-program "ls" nil :output *standard-output*)



(defmacro test (a)
  `(let ((c ,a))
     (print c)))

(defmacro test (a)
  `(let ((c ,a))
     `(let ((d ,c))
	(print d))))

(defmacro test (a)
  `(let ((c ,a)
	 (cc ,a))
     `(let ((d ,,a))
	(print d))))

(defmacro test (a)
  `(let ((c ,a)
	 (cc ,a))
     `(let ((d ,cc))
	(print d))))

(defmacro test (a)
  `(let ((x ,a))
     (print x)
     (eval `(when 1
       (setf a 12)
       (print a)))
    (print x)))

(defmacro test (a)
  `(progn
     (print ,a)
     (eval `(when 1
	      (setf ,a 12)
	      (print a)))
    (print ,a)))

`(,(intern "TEST") 1)

(defun test (a)
  (progn
    (print a)
    (eval `(setf a 12))
    (print a)))
    

(defun ip-packet-split (ip-packet instream)
  (loop for (a b) in *ip-packet-format* do
	;;; a 'a
       (let ((field-length (nth 1 (assoc a ip-packet)))
	     (macro-name (concatenate 'string "MODIFY-IPS-" (symbol-name a))))
	 (when (< field-length 0)
	   (print 13321)
            ;;; a -> "a"  OPTION -> "OPTION" 
	    ;;; (,(intern (concatenate 'string "MODIFY-IPS-" (symbol-name a)))
	    ;;;  ,ip-packet)
	   (print macro-name)
	   (print (type-of macro-name))
;	   (run-macro-byname macro-name ip-packet)
	      ;;; a
	   (print field-length)
	   (print (nth 1 (assoc a ip-packet))))

(defmacro ip-packet-split (ip-packet instream)
  `(loop for (a b) in *ip-packet-format* do
	;;; a 'a
	(let ((field-length (nth 1 (assoc a ,ip-packet))))
	  (when (< field-length 0)
	    (print 13321)
             ;;; a -> "a"  OPTION -> "OPTION" 
	    (eval `(,(intern (concatenate 'string "MODIFY-IPS-" (symbol-name a)))
	      ,,ip-packet))
	      ;;; a
	    (print field-length)
	    (print (nth 1 (assoc a ,ip-packet))))
	  (read-sequence (nth 2 (assoc a ,ip-packet)) ,instream
			 :start 0 :end field-length))))

(defmacro test (a)
  (progn
    `(format t "~d ~%" ,a)
    `(setf a 12)
    `(format t "~d ~%" ,a)))

1-1-1-2.pcapng
0A0D0D0A740000004D3C2B1A01000000FFFFFFFFFFFFFFFF03001C0033322D6269742057696E646F777320382C206275696C64203932303004002F0044756D7063617020312E31302E32202853564E205265762035313933342066726F6D202F7472756E6B2D312E313029000000000074000000

010000007800000001000000FFFF0000020032005C4465766963655C4E50465F7B44414643393338462D453330442D344631442D423437422D3336414136433531383238387D000009000100060000000C001C0033322D6269742057696E646F777320382C206275696C6420393230300000000078000000

pcapng: 
06000000 block type
6C000000 block total length
00000000 interface id
56210500 timestamp (high)
AA390A68 timestramp (low)
4A000000 captured len
4A000000 packet len
000087E4 72590002 BBA8BED9 08004500 003C2B5D 0000FF01 0A0BDEE7 E447DEE7
E4410800 30C51C45 4ADB0000 00005612 25B40000 0000000A 11775A5A 5A5A5A5A
5A5A5A5A 5A5A5A5A 5A5A0000
6C000000 block total length

1-1-3-2.pcapng

0A0D0D0A740000004D3C2B1A01000000FFFFFFFFFFFFFFFF03001C0033322D6269742057696E646F777320382C206275696C64203932303004002F0044756D7063617020312E31302E32202853564E205265762035313933342066726F6D202F7472756E6B2D312E313029000000000074000000

010000009000000001000000FFFF0000020032005C4465766963655C4E50465F7B37413234303734322D334137432D343739382D413939452D3735464138383234453845337D000009000100060000000B001200006E6F742074637020706F7274203333383900000C001C0033322D6269742057696E646F777320382C206275696C6420393230300000000090000000

010000009000000001000000FFFF0000020032005C4465766963655C4E50465F7B44414643393338462D453330442D344631442D423437422D3336414136433531383238387D000009000100060000000B001200006E6F742074637020706F7274203333383900000C001C0033322D6269742057696E646F777320382C206275696C6420393230300000000090000000

060000006C000000010000006E220500D08AFD664A0000004A000000000087E472590002BBA8BED808004500003CC67E0000FF016DE9DEE7E4C7DEE7E4C10800D31941E1725D0000000056247F3800000000000AC86D5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A00006C000000

1-1-1-2.pcap
D4C3B2A1 0200 0400 00000000 00000000 00000400 01000000
B7251256EA9D0E00 4A000000 4A000000
000087E472590002BBA8BED908004500003C2B5D0000FF010A0BDEE7E447DEE7E441080030C51C454ADB00000000561225B400000000000A11775A

test.pcap
D4C3B2A1 0200 0400 00000000 00000000 FFFF0000 01000000
A27E03566B660200 C2000000 C2000000
000AE4842A9F000423DF7B9C0800451000B4979040004006D276C0A82778C0A827640016D4EB3C5714AF5DDBCF0A8018005AD0D300000101080A9E9AC3E8B665BF56EC9B0C50E96A3A1FB9850DE58054786D20B61FB729D0F122FFDB17E2147E51F03BD463C175110EF64291E71F9831091184351040EB8742F8D1CE4DDF5C3D7B6977FFE2C09225B2A2DD9234A956D021F8B36B05FF472C778AE989B934A09453AD1DC137F355BD2562FCD1A53BD887B12D7034B4D629060335D18728A393EE9DD8

test1-5.pcap
D4C3B2A1020004000000000000000000FFFF000071000000

D16E1C56DE6B0C00E8000000E8000000 # 16*14 + 8 = 232 bytes
0004000100060024A568310400000800
451000D8C03B400040069D1B0A3264360A32641F0016DD8C2C85210A9D6F940B501801FEABAD0000F4E9D04665495BE9D594CABAFFCEA8EDBCE2ED2692D7CA6133BE43E5808F4622E1C221E0A95023E677269990260B79DBC47118E95FE07F0623C01FDE384AB66996F07D2A61DB84F29379E32076816C34FC0BB9041BA7D1991332ED06610BC6B3162C431757DB725FB30BC1BD65563FE80B1A6F8DB0D003D97340A1E136D5CA080E9B0F3FFE92E3188DEF876BB2AC427E3981AE0D923EAB3D52FFADCBE89A26629A7AA48FC6F0BC3FFAFA2E60DE89989D

D16E1C56D8700C003E0000003E000000 # 16*3 + 14 = 62 bytes
0000000100062CD444B4005D00000800
45000028449240008006D9840A32641F0A326436DD8C00169D6F940B2C8521BA50103F3936850000000000000000

D16E1C56D9700C004200000042000000 
000300010006A56831042CD4000044B4
005D080045000028449240008006D9840A32641F0A326436DD8C00169D6F940B2C8521BA50103F3936850000000000000000

D26E1C562A4602004200000042000000 # 16*4 + 2 = 66 bytes
00020001000600005E00012900008100
032A00040000E3000001503FD0039F0000000000010000000000000000000000000000000000000000000001800000000000

D26E1C565F4602004200000042000000 # 16*4 + 2 = 66 bytes
00020001000600005E00012900008100
032B00040000E3000001503FD0039F0000000000010000000000000000000000000000000000000000000001800000000000


16*3 + 14

16*15 + 15 = 255
255 * 8 = 2040


(defun test () 
  (let ((result nil)) 
    (progn
      (dotimes (x 5)
	(setf (last result) (list x)))
      (return result))))


send_pcmu_short.pcapng:

0A0D0D0A1C0000004D3C2B1A01000000FFFFFFFFFFFFFFFF1C000000
010000002000000071000000FFFF000009000100060000000000000020000000
06000000E400000000000000A9220500B87BF30FC4000000C4000000000400010006000423DF7B9C00000800451000B4C5E540004006A421C0A82778C0A827640016E10F52D3E7ECE5BA72658018005AD0D300000101080A2F0D38992F10B94EF20DFC9C8D6CD5F57F654EEFAD39662A73FD6B8F38F7CD212A50575E9E6BD7B56BA21EBDCC339D8059A6A3760556BAE0DDFE42824066765A905530FEF29FFD05FE51309B5AEF0DD9908A1893F5BE073E2687595192F6C79C663A38290A57EA46F022A923F0FA33DF28E2524C37DC7BF4EB1969DABC3A60F60172AC75DB7627FAE4000000
060000006400000000000000A92205000F7CF30F4400000044000000000000010006000AE4842A9F00000800451000342D98400040063CEFC0A82764C0A82778E10F0016E5BA726552D3E86C801001F5E00000000101080A2F10B95D2F0D389964000000
060000009400000000000000A92205008E171D107400000074000000000000010006000AE4842A9F0000080045100064897040004006E0E6C0A82764C0A82778877B001622302571A9901EBC801801F5A44200000101080A2F10C4042F062A46E927D5EAE68889BFFE9CD1945E1B5AA128D562CEC182FC8745D9D836F0AE6E8DA8E063C5A43D4DD8DFADB94D42C2C28194000000



(lambda ()
  (cl-ppcre:regex-replace
   "cpc=[a-zA-Z]*"
   "sip:<adsbn;cpc=test;asdf>"
   '("<font color=\"red\">" :match "</fond>")))


52494646 RIFF
B2380100 file byte
57415645 WAVE
666D7420 fmt 
12000000 format info
07000100401F0000401F0000010008000000
66616374 fact
04000000 fact chunch byte number
80380100 sample number
64617461 data                     
80380100 

52494646 RIFF
B2A90300 file byte
57415645 WAVE
666D7420 fmt 
12000000 format info
07000100401F0000401F0000010008000000
66616374 fact
04000000 fact chunch byte number
80A90300 sample total length
64617461 data                     
80A90300 sample total length

7175F13F333C3A34353856BAB4B8BF6645373A4359D0C3C956464EC8C8D6F0CDDC45C9E2515A3C3F7DCBC9C0D25B422F333D453E30313FD8BEC7D1CECE7D4052BBB3C3595AAEABF4393EC8DBCFB7BADE33325DB5BD6D63DEBE492F3C57643B2E43C8CE4C42CFBB5C282DDEABABE3455BBF6E4B42E4CA3CDCB6BC63404CB2A4B9BBBFC3CA3FCFB2BE473646B9AABBC4CB72CB412E394CED53403BC7BDCDDE56ED
383DDF4C353D64EECA5963BCBEDF3F394EDB5D3F3E6EBDB6B9CBDFBBC741495DB8B9D649EEACADBE3B7DDEF1AEB1BE723F4EB3B1D3C8C6BBCA3946C4C5624B6EAEA7BADEE3ADA9F83946C7BBD83DDDAEC9D85DC4BE45E6B8BC4C4B6DB8ACDAC7ACB1EC2929CEB5593548BFA8B26ACCBAB5F83B48D1C952E5CAB1ADBE68544634CDBF4028294DBECF3B4DBBAFC73531E7CC5F423C5EC7CF6FEAD3B8BD3D3A42C1
B9673936B8B2EE36394058B5F637323CE9B8BA70BCC1E6E83C58BAC64C3D57ACA4AEC8D9B6AEEF3269BBBACD4C74B2B4DCD7BBBE48ECC05F343758BEB84AFBACABD0282752DD2D2031CBADBE49E7BAC947333DBBCA3B3349C8AFB751CAC06861B4B53F3B3C54E7494FC6AFD13F2F2E3D4139354BD8BFCD6EF3BF

52494646
7ADD0000
57415645
666D7420
12000000
07000100401F0000401F0000010008000000
66616374
04000000
40DD0000
64617461
40DD0000
